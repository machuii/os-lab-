alias userSP R10;
userSP=SP;
[PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;//store user stack 
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;//change sp to kernal stack 
breakpoint;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9] = 8;

alias newpid R11;
multipush(R10);
	R1=1; //get pcb
	R2=[SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
multipop(R10);
newpid=R0;
breakpoint;
//MAX PROCESS REACHED 
if(newpid==-1)then
	[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=-1;

	//changing back to user stack
	SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
endif;

if([PTBR + 4] == -1 || [PTBR + 6] == -1) then

	//Allocting HEAP PAGE 1
	multipush (R11, R10);
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PTBR + 4] = R0;
	[PTBR + 5] = "0110";		
	multipop (R11, R10);



	//Allocating HEAP PAGE 2
	multipush (R11, R10);
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PTBR + 6] = R0;
	[PTBR + 7] = "0110";		
	multipop (R11, R10);
endif;

// stack page for child
	multipush (R11, R10);
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PAGE_TABLE_BASE+newpid*20 + 16] = R0;
	[PAGE_TABLE_BASE+newpid*20 + 17] = "0110";		
	multipop (R11, R10);
	
	multipush (R11, R10);
	R1 = GET_FREE_PAGE;
	call MOD_2;
	[PAGE_TABLE_BASE+newpid*20 + 18] = R0;
	[PAGE_TABLE_BASE+newpid*20 + 19] = "0110";		
	multipop (R11, R10);

// userpage for child
	multipush (R11, R10);
	R1=1;
	call MOD_2;
	[PROCESS_TABLE+16*newpid+11]=R0;
	multipop (R11, R10);
	
breakpoint;
//Copiying "user id" 
[PROCESS_TABLE+16*newpid + 3]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 3];

//Copiying "swap flag" 
[PROCESS_TABLE+16*newpid + 6]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 6];

//Copiying "user area swap status" 
[PROCESS_TABLE+16*newpid + 10]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 10];

//Copiying "inode index" 
[PROCESS_TABLE+16*newpid + 7]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 7];

//Copiying "UPTR" 
[PROCESS_TABLE+16*newpid + 13]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

//Setting "mode flag" 
[PROCESS_TABLE+16*newpid + 9]=0;

//Setting "KPTR" 
[PROCESS_TABLE + 16*newpid + 12]=0;

//Setting "TICK field" 
[PROCESS_TABLE + 16*newpid + 0]=0;

//PPID of child == PID of parent
[PROCESS_TABLE + 16*newpid + 2]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 1];

//State of child process is set to created
[PROCESS_TABLE + 16*newpid + 4]=CREATED;

alias i R12;
i=0;
while(i<=9) do
	[DISK_MAP_TABLE + newpid*10+i]=[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10+i];
	i=i+1;
endwhile;

//pagetable

i=0;
while(i<=14) do
	[PAGE_TABLE_BASE+newpid*20+i]=[PTBR+i];
	[MEMORY_FREE_LIST+[PTBR+i]]=[MEMORY_FREE_LIST+[PTBR+i]]+1;
	[PAGE_TABLE_BASE+newpid*20+i+1]=[PTBR+i+1];
	i=i+2;
endwhile;

//copy userstack 

i = 0;		
while(i < 512) do
	if([PTBR + 16] != -1) then
		[[PAGE_TABLE_BASE+newpid*20 + 16]*512 + i] = [[PTBR + 16]*512 + i];
	endif;

	if([PTBR + 18] != -1) then
		[[PAGE_TABLE_BASE+newpid*20 + 18]*512 + i] = [[PTBR + 18]*512 + i];
	endif;
i = i + 1;
endwhile;
//store bp in kernal stack of child
[[PROCESS_TABLE+16*newpid+11]*512] = BP;

//parent return value
[( [PTBR+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= newpid;

//child return value
[( [PAGE_TABLE_BASE+newpid*20+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= 0;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = userSP;
breakpoint;
ireturn;

	
	
	
	
	
